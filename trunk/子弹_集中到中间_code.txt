#!/usr/bin/python
# -*- coding: GBK -*-
#author:李金潮
#version:子弹_集中到中间(带预判位置)

import GameWorld 
import GameComm
import math
import time

AI_NAME = "lijinchaoex"

# 调试信息输出
def log(argv, flag=True):
    if flag:
        output = AI_NAME
        output += "####" + str(type(argv)) + ": " + str(argv) 
        GameWorld.IPY_GameWorld().OutputDebugInfo(output)

#使用buff的时间       
BuffTick = 0

#记录上次生物的位置
posDict = {} # handle:(x,y)

# 本ai把所有的位置和方向都换算成了以屏幕左上为原点的坐标系
def ProcessAI(UnitHandle):
    #武器起始位置
    firestart = 8
    #firestart = 7
    fireend = 33
    #fireend = 13
    
    #子弹速度
    boomSpeed = 3
    bulletSpeed = 3
    
    #处理距离,若超出此距离则要向目标或者屏幕中央移动
    MinDis = 600
    
    #使用眼睛的时间间隔
    interval = 6000
    global BuffTick

    #屏幕中央的位置
    width = 400 #GW.GetSceneWidth() / 2
    height = 300 #GW.GetSceneHeight() / 2
    
    UH = UnitHandle
    GW = GameWorld.IPY_GameWorld()
    selfInfo = GW.GetUnitInfo(UH)        

    #遍历周围生物
    clist = []  # 存储creatur
    danger = []   # 存储有威胁的对象
    for i in range(0, GW.GetNearUnitCount(UH)):
        h = GW.GetNearUnitHandleByIndex(UH, i)
        info = GW.GetUnitInfo(h)
        if info.Type == 'creature' and h != GW:
            dis, dir = GetDisAndDir(selfInfo, info)  #得到与目标的距离和在绝对坐标系中的方向
            bulletTime = bulletSpeed * dis # 子弹飞行所需时间
            SetFuturePox(info, bulletTime)  # 修订目标bulletTime后的位置

            dis, dir = GetDisAndDir(selfInfo, info)  #得到与目标的距离和在绝对坐标系中的方向(此处为修订后的结果)
            MinDir = GetFireDegress(info, dis)  # 开火能够命中的最大偏差角度
            clist.append([dis, dir, MinDir, info]) # 距离, 角度, 命中的最大偏差, 敌人信息
   
        if info.Type in ['bullet', 'missile', 'bombbullet', 'creature'] and info.MasterId != selfInfo.ID:
            #log("###子弹速度 :" + str(info.Type) + ":" + str(info.MoveSpeed))
            ds, dr = GetDisAndDir(selfInfo, info)
            danger.append([ds, info.MoveSpeed])
    # 按距离排序
    clist.sort(key=lambda x:x[0])   
    
    # 闪避
    MinTime = 10000
    for i in danger:
        MinTime = min(MinTime, i[0] * i[1])  # 距离*弹药移动速度等于打中的时间
    if MinTime < 330 and GW.GetUnitPartInfoByIndex(UH, 3).IsDuringCD == 0:
        log("###闪避:" + str(MinTime))
        return "4 3"
    
    #存储角度偏差最小的的火炮index
    temMinDirIndex = 0
    temMinDir = 360
    temDis = 1000
    # 角度差的正负
    Plus = True
    
    #遍历五门火炮 进行开火
    for i in range(firestart, fireend):
        can = GW.GetUnitPartInfoByIndex(UH, i)
        if can.IsDuringCD == 1:  #cd中pass
            continue   
         
        selfdir = GetDegress(selfInfo.Dir + can.InstallDir)  # 火炮方向
        for l in clist:
            dir = math.fabs(selfdir - l[1]) # 前者是火炮的方向,后者是本体指向敌人的方向        
            if dir < temMinDir:
                temMinDirIndex = i #存储火炮
                temMinDir = dir #角度差
                temDis = l[0]
                Plus = True if selfdir - l[1] > 0 else False # 角度差的正负
               
            if dir < l[2]: #开火
                log("$$$$开火")
                return "4 %d" % i
             
    # 遍历完成未能开火
    if temDis < MinDis  and  Plus: # 左转
        log("$$$$左转", 1)
        return "1 %d" % min(10, int(MinDir))
    
    if temDis < MinDis and not Plus: # 右转
        log("$$$$右转", 1)
        return "2 %d" % min(10, int(math.fabs(MinDir)))
                
    # 若是最小偏差的火炮都难以转向,则移动到最近的敌人旁边           
    log("##########move to 最近的生物") 
    if len(clist) > 0:
        nearInfo = clist[0][3]
        return Move(selfInfo, nearInfo.PosX, nearInfo.PosY)   
    else:
        # 找不到生物则,启动眼睛
        if (GW.GetCpuTick() - BuffTick > interval) : 
            for i in range(0, 3): #遍历眼睛,冷却则使用
                eye = GW.GetUnitPartInfoByIndex(UH, i)
                if eye.IsDuringCD == 0:
                    BuffTick = GW.GetCpuTick()  #记录时间
                    return "4 %d" % i
        #若以上均未操作,则向中间移动   
        return Move(selfInfo, width, height)         
  
# boomTime后,修订info的位置
# 有一部分生物总是在附近转来转去,第一次
def SetFuturePox(info, boomTime):
    global posDict
    log("###time " + str(boomTime))
    #第一次出现
    if not posDict.has_key(info.Handle):
        log('no info')
        posDict.update({info.Handle:(info.PosX, info.PosY, boomTime)})
        return
    
    
    (lx, ly, flag) = posDict[info.Handle]
    boomTime = boomTime / flag # 第一次打原位置,第二次打预计的位置,循环
    log("打的位置:" + str(boomTime))
    log("lastx " + str(lx))
    log("lasty " + str(ly))
    dir = info.MoveSpeed
    x = info.PosX
    y = info.PosY
    
    # 未来的位置
    info.PosX = max(0, int(boomTime * (x - lx) / 100 + x))
    info.PosY = max(0, int(boomTime * (y - ly) / 100 + y))
    # 储存当前位置
    posDict.update({info.Handle:(x, y, boomTime)})
         
#移动到某点
# 小于25度移动
# 大于25小于45 转动
def Move(selfinfo, x, y):
    sx = selfinfo.PosX
    sy = selfinfo.PosY
    
    degress = GetDegressByXY(x - sx, y - sy) # 本体指向目标的矢量方向
    dir = (GetDegress(selfinfo.Dir) - degress + 180) % 360

    if (dir >= 0 and dir <= 45) or (dir >= 315 and dir <= 360):
        return "7 10"  # 后退
    if dir > 45 and dir < 135:
        return "5 10"  # 左移    
    if dir >= 135 and dir < 225:
        return "3 10"  # 前进
    if dir >= 225 and dir < 315:
        return "6 10"  # 右移动
                    
#param:自己实例 目标实例
#return 距离 和  面向偏差角度            
def GetDisAndDir(selfInfo, info):
    x1 = selfInfo.PosX
    y1 = selfInfo.PosY
    x2 = info.PosX
    y2 = info.PosY
    
    dis = math.hypot(x1 - x2, y1 - y2)  #本体与目标距离
    degress = GetDegressByXY(x2 - x1, y2 - y1) # 本体指向目标的矢量方向
    dir = degress   
    return dis, dir

# 得到多少度可以开火(mindir)
def GetFireDegress(target, dis):
    panduan = math.fabs(target.BodyHeight - target.BodyWidth) 
    # 敌人的宽高比越小,则需要瞄准的角度越要精确
    if panduan < 25: 
        tanValue = (target.BodyWidth + target.BodyHeight) * 2 / (6 * dis)
    elif panduan < 40: 
        tanValue = (target.BodyWidth + target.BodyHeight) * 2 / (5 * dis)
    elif panduan < 55: 
        tanValue = (target.BodyWidth + target.BodyHeight) * 2 / (4 * dis)
    elif panduan < 70: 
        tanValue = (target.BodyWidth + target.BodyHeight) * 2 / (3 * dis)
    else:
        tanValue = (target.BodyWidth + target.BodyHeight) * 2 / (2 * dis)
    
    tanValue = (target.BodyWidth + target.BodyHeight) * 2 / (16 * dis)
    #log("#######panduan: " + str(panduan))
    degrees = math.degrees(math.asin(tanValue))
    #log('####开火的角度:' + str(degrees))                 
    return degrees

#根据x y 得到在坐标系中的度数
def GetDegressByXY(x, y):
    radian = math.atan2(y, x) 
    degress = (360 + math.degrees(radian)) % 360
    return degress
       
# 坐标系为y轴反了 dir少了一个象限
def GetDegress(dir):
    return (dir + 270) % 360    


        
        
